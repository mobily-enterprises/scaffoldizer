#!/usr/bin/env node
import { program } from 'commander'
import { readFileSync } from 'fs'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'
import { add } from '../commands/add.js'
import { run } from '../commands/run.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const scaffoldizerPackageJson = JSON.parse(readFileSync(join(__dirname, '../package.json'), 'utf8'))

const increaseVerbosity = (dummyValue, previous) => previous++

main()

async function main () {
  //
  // Set the version depending on package.json
  program.version(scaffoldizerPackageJson.version)

  // The main command: add
  program.option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)
  program.requiredOption('-s, --scaffold <scaffold>', '(Required) Scaffold to use. It can be an NPM module or a local directory.')
  program.requiredOption('-d, --destination <destination>', '(Required) Destination project. It must contain a package.json file')

  program.command('add [modules...]')
    .description('Add scaffold modules to the destination. If no module is specified, a user interface will launch.')
    .action(modules => {
      add(program.scaffold, program.destination, modules)
    })

  program.command('run [script]')
    .description('Run a scaffold script on the destination. If no script is specified, a user interface will launch.')
    .action(script => {
      run(program.scaffold, program.destination, script)
    })

  await program.parseAsync(process.argv)
}
